{"version":3,"file":"veswap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x814ab84a151662c6d1f8142abce02ca25c05905e'\n\nexport const INIT_CODE_HASH = '0xce9e96eb8c49097c62710626bc7a3c4582a97bc3d91df54fa53516da8edb72b8'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId, SolidityType } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\n\n// TODO: what is this address for?\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\nexport class Token {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.decimals = decimals\n    if (typeof symbol === 'string') this.symbol = symbol\n    if (typeof name === 'string') this.name = name\n  }\n\n  equals(other: Token): boolean {\n    const equal = this.chainId === other.chainId && this.address === other.address\n    if (equal) {\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equal\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x45429A2255e7248e57fce99E7239aED3f84B7a53', 18, 'VVET', 'VVET')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\n    this.token = token\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.token.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Token } from '../token'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { TokenAmount } from './tokenAmount'\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token // input i.e. denominator\n  public readonly quoteToken: Token // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseToken: Token, quoteToken: Token, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseToken = baseToken\n    this.quoteToken = quoteToken\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseToken.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteToken.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteToken, this.baseToken, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(this.quoteToken.equals(other.baseToken), 'BASE')\n    const fraction = super.multiply(other)\n    return new Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(tokenAmount: TokenAmount): TokenAmount {\n    invariant(tokenAmount.token.equals(this.baseToken), 'TOKEN')\n    return new TokenAmount(this.quoteToken, super.multiply(tokenAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.map(pair => pair.token0.chainId === pairs[0].token0.chainId).every(x => x),\n      'CHAIN_IDS'\n    )\n    const path = [input]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n    invariant(path.length === new Set(path).size, 'PATH')\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n  }\n\n  get input(): Token {\n    return this.path[0]\n  }\n\n  get output(): Token {\n    return this.path[this.path.length - 1]\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Token } from 'entities/token'\nimport invariant from 'tiny-invariant'\n\nimport { ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction, TokenAmount } from './fractions'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\nfunction getSlippage(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: TokenAmount\n  readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.token.equals(b.inputAmount.token), 'INPUT_TOKEN')\n  invariant(a.outputAmount.token.equals(b.outputAmount.token), 'OUTPUT_TOKEN')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.slippage.lessThan(b.slippage)) {\n    return -1\n  } else if (a.slippage.greaterThan(b.slippage)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: TokenAmount\n  public readonly outputAmount: TokenAmount\n  public readonly executionPrice: Price\n  public readonly nextMidPrice: Price\n  public readonly slippage: Percent\n\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n    invariant(amount.token.equals(tradeType === TradeType.EXACT_INPUT ? route.input : route.output), 'TOKEN')\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      amounts[0] = amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      amounts[amounts.length - 1] = amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    const inputAmount = amounts[0]\n    const outputAmount = amounts[amounts.length - 1]\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(route.input, route.output, inputAmount.raw, outputAmount.raw)\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.slippage = getSlippage(route.midPrice, inputAmount, outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      return new TokenAmount(\n        this.outputAmount.token,\n        new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.raw).quotient\n      )\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      return new TokenAmount(\n        this.inputAmount.token,\n        new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      )\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    amountIn: TokenAmount,\n    tokenOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = amountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === amountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut!.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.token),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut!,\n          tokenOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    tokenIn: Token,\n    amountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = amountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === amountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn!.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(new Route([pair, ...currentPairs], tokenIn), originalAmountOut, TradeType.EXACT_OUTPUT),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          tokenIn,\n          amountIn!,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { find } from 'lodash'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport ERC20 from './abis/ERC20.json'\nimport invariant from 'tiny-invariant'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param connex optional name of the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    connex: any,\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const abi = find(ERC20, { name: 'decimals' })\n    const method = connex.thor.account(address).method(abi as any)\n\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await method\n            .call()\n            .then(({ decoded }: any) => Number(decoded[0]))\n            .then((decimals: number) => {\n              TOKEN_DECIMALS_CACHE = {\n                ...TOKEN_DECIMALS_CACHE,\n                [chainId]: {\n                  ...TOKEN_DECIMALS_CACHE?.[chainId],\n                  [address]: decimals\n                }\n              }\n              return decimals\n            })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(tokenA: Token, tokenB: Token, connex: any): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const pairAddress = Pair.getAddress(tokenA, tokenB)\n\n    const getReservesABI = find(IUniswapV2Pair.abi, { name: 'getReserves' })\n    const getReservesMethod = connex.thor.account(pairAddress).method(getReservesABI)\n\n    const reserves = await getReservesMethod.call().then((data: any) => data.decoded)\n    const { reserve0, reserve1 } = reserves\n    const balances = tokenA.sortsBefore(tokenB) ? [reserve0, reserve1] : [reserve1, reserve0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CACHE","MAINNET","Token","chainId","decimals","symbol","this","fetchData","provider","parsedDecimals","getDefaultProvider","getNetwork","_CACHE2","_CACHE2$chainId","Contract","ERC20","then","_CACHE3","equals","other","equal","sortsBefore","toLowerCase","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","TokenAmount","token","amount","parsedAmount","exponentiate","raw","toExact","Price","baseToken","quoteToken","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","tokenAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","map","every","currentInput","output","Set","size","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","slippage","Trade","tradeType","EXACT_INPUT","amounts","Array","nextPairs","i","nextPair","executionPrice","nextMidPrice","exactQuote","getSlippage","minimumAmountOut","slippageTolerance","EXACT_OUTPUT","maximumAmountIn","bestTradeExactIn","amountIn","tokenOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","amountOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","tokenIn","originalAmountOut","isInsufficientReservesError","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","connex","abi","find","method","thor","account","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","call","decoded","_TOKEN_DECIMALS_CACHE4","fetchPairData","pairAddress","getReservesABI","IUniswapV2Pair","getReservesMethod","data","reserves","balances"],"mappings":"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"}