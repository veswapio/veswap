{"version":3,"file":"veswap-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x814ab84a151662c6d1f8142abce02ca25c05905e'\n\nexport const INIT_CODE_HASH = '0xce9e96eb8c49097c62710626bc7a3c4582a97bc3d91df54fa53516da8edb72b8'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId, SolidityType } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\n\n// TODO: what is this address for?\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\nexport class Token {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.decimals = decimals\n    if (typeof symbol === 'string') this.symbol = symbol\n    if (typeof name === 'string') this.name = name\n  }\n\n  equals(other: Token): boolean {\n    const equal = this.chainId === other.chainId && this.address === other.address\n    if (equal) {\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equal\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x45429A2255e7248e57fce99E7239aED3f84B7a53', 18, 'VVET', 'VVET')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\n    this.token = token\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.token.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Token } from '../token'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { TokenAmount } from './tokenAmount'\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token // input i.e. denominator\n  public readonly quoteToken: Token // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseToken: Token, quoteToken: Token, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseToken = baseToken\n    this.quoteToken = quoteToken\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseToken.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteToken.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteToken, this.baseToken, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(this.quoteToken.equals(other.baseToken), 'BASE')\n    const fraction = super.multiply(other)\n    return new Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(tokenAmount: TokenAmount): TokenAmount {\n    invariant(tokenAmount.token.equals(this.baseToken), 'TOKEN')\n    return new TokenAmount(this.quoteToken, super.multiply(tokenAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.map(pair => pair.token0.chainId === pairs[0].token0.chainId).every(x => x),\n      'CHAIN_IDS'\n    )\n    const path = [input]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n    invariant(path.length === new Set(path).size, 'PATH')\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n  }\n\n  get input(): Token {\n    return this.path[0]\n  }\n\n  get output(): Token {\n    return this.path[this.path.length - 1]\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Token } from 'entities/token'\nimport invariant from 'tiny-invariant'\n\nimport { ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction, TokenAmount } from './fractions'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\nfunction getSlippage(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: TokenAmount\n  readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.token.equals(b.inputAmount.token), 'INPUT_TOKEN')\n  invariant(a.outputAmount.token.equals(b.outputAmount.token), 'OUTPUT_TOKEN')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.slippage.lessThan(b.slippage)) {\n    return -1\n  } else if (a.slippage.greaterThan(b.slippage)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: TokenAmount\n  public readonly outputAmount: TokenAmount\n  public readonly executionPrice: Price\n  public readonly nextMidPrice: Price\n  public readonly slippage: Percent\n\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n    invariant(amount.token.equals(tradeType === TradeType.EXACT_INPUT ? route.input : route.output), 'TOKEN')\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      amounts[0] = amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      amounts[amounts.length - 1] = amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    const inputAmount = amounts[0]\n    const outputAmount = amounts[amounts.length - 1]\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(route.input, route.output, inputAmount.raw, outputAmount.raw)\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.slippage = getSlippage(route.midPrice, inputAmount, outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      return new TokenAmount(\n        this.outputAmount.token,\n        new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.raw).quotient\n      )\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      return new TokenAmount(\n        this.inputAmount.token,\n        new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      )\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    amountIn: TokenAmount,\n    tokenOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = amountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === amountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut!.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.token),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut!,\n          tokenOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    tokenIn: Token,\n    amountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = amountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === amountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn!.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(new Route([pair, ...currentPairs], tokenIn), originalAmountOut, TradeType.EXACT_OUTPUT),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          tokenIn,\n          amountIn!,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { find } from 'lodash'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport ERC20 from './abis/ERC20.json'\nimport invariant from 'tiny-invariant'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param connex optional name of the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    connex: any,\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const abi = find(ERC20, { name: 'decimals' })\n    const method = connex.thor.account(address).method(abi as any)\n\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await method\n            .call()\n            .then(({ decoded }: any) => Number(decoded[0]))\n            .then((decimals: number) => {\n              TOKEN_DECIMALS_CACHE = {\n                ...TOKEN_DECIMALS_CACHE,\n                [chainId]: {\n                  ...TOKEN_DECIMALS_CACHE?.[chainId],\n                  [address]: decimals\n                }\n              }\n              return decimals\n            })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(tokenA: Token, tokenB: Token, connex: any): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const pairAddress = Pair.getAddress(tokenA, tokenB)\n\n    const getReservesABI = find(IUniswapV2Pair.abi, { name: 'getReserves' })\n    const getReservesMethod = connex.thor.account(pairAddress).method(getReservesABI)\n\n    const reserves = await getReservesMethod.call().then((data: any) => data.decoded)\n    const { reserve0, reserve1 } = reserves\n    const balances = tokenA.sortsBefore(tokenB) ? [reserve0, reserve1] : [reserve1, reserve0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CACHE","MAINNET","Token","chainId","decimals","symbol","fetchData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","equals","other","equal","sortsBefore","toLowerCase","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","TokenAmount","token","amount","parsedAmount","exponentiate","raw","toExact","Price","baseToken","quoteToken","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","tokenAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","map","every","currentInput","output","Set","size","midPrice","_100_PERCENT","Percent","getSlippage","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","Trade","tradeType","EXACT_INPUT","amounts","Array","nextPairs","nextPair","executionPrice","nextMidPrice","minimumAmountOut","slippageTolerance","EXACT_OUTPUT","maximumAmountIn","bestTradeExactIn","amountIn","tokenOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","amountOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","tokenIn","originalAmountOut","isInsufficientReservesError","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","connex","abi","find","method","thor","account","call","decoded","fetchPairData","pairAddress","getReservesABI","IUniswapV2Pair","getReservesMethod","data","reserves","balances"],"mappings":"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"}